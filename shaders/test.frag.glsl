#version 420
/* file generated by shady */
#extension GL_ARB_gpu_shader_int64: require
#define ubyte uint
#define uchar uint
#define ulong uint

/* types: */

struct Array_130 {
    uint arr[1024];
};

/* declarations: */

void main();
void generated_init();
void generated_store_as4_varying_u32(uint64_t ptr_28, uint value_29);
uint generated_load_as4_varying_u32(uint64_t ptr_40);
void generated_store_as4_varying_pack_type_127(uint64_t ptr_49, vec4 value_50);
vec4 generated_load_as4_varying_pack_type_95(uint64_t ptr_68);
/* definitions: */

uint stack_ptr = 0U;
in vec2 texCoord;
out vec4 fragColor;
void main() { 
    uint cf_depth_90;
    cf_depth_90 = 0;
    generated_init();
    const uint load_91 = stack_ptr;
    const uint load_92 = stack_ptr;
    const uint64_t convert_93 = uint64_t(load_92);
    const uint64_t add_94 = convert_93 + 4UL;
    const uint64_t add_95 = convert_93 + 8UL;
    const uint64_t add_96 = convert_93 + 12UL;
    const uint64_t add_97 = convert_93 + 28UL;
    const uint convert_98 = uint(44UL);
    const uint add_99 = load_91 + convert_98;
    stack_ptr = add_99;
    cf_depth_90 = 1;/* Generated generic ptr convert src 4 tag 3 */
    const uint64_t and_100 = convert_93 & 4611686018427387903UL;
    const uint64_t or_101 = and_100 | 13835058055282163712UL;/* Generated generic ptr convert src 4 tag 3 */
    const uint64_t and_102 = add_94 & 4611686018427387903UL;
    const uint64_t or_103 = and_102 | 13835058055282163712UL;/* Generated generic ptr convert src 4 tag 3 */
    const uint64_t and_104 = add_95 & 4611686018427387903UL;
    const uint64_t or_105 = and_104 | 13835058055282163712UL;/* Generated generic ptr convert src 4 tag 3 */
    const uint64_t and_106 = add_96 & 4611686018427387903UL;
    const uint64_t or_107 = and_106 | 13835058055282163712UL;/* Generated generic ptr convert src 4 tag 3 */
    const uint64_t and_108 = add_97 & 4611686018427387903UL;
    const uint64_t or_109 = and_108 | 13835058055282163712UL;
    const vec2 load_110 = texCoord;
    const float _111 = (load_110.x);
    const float _112 = _111 * 16;
    const uint _113 = uint(_112);
    const uint mod_114 = _113 % 2U;
    generated_store_as4_varying_u32(convert_93, mod_114);
    const vec2 load_115 = texCoord;
    const float _116 = (load_115.y);
    const float _117 = _116 * 16;
    const uint _118 = uint(_117);
    const uint mod_119 = _118 % 2U;
    generated_store_as4_varying_u32(add_94, mod_119);
    const uint load_120 = generated_load_as4_varying_u32(convert_93);
    const uint load_121 = generated_load_as4_varying_u32(add_94);
    const uint _122 = load_120 ^ load_121;
    generated_store_as4_varying_u32(add_95, _122);
    const uint load_123 = generated_load_as4_varying_u32(add_95);
    const bool _124 = load_123 != 0U;
    if (_124) { 
        generated_store_as4_varying_pack_type_127(add_96, vec4(1, 1, 0, 1));
        const vec4 load_125 = generated_load_as4_varying_pack_type_95(add_96);
        fragColor = load_125;
        cf_depth_90 = 0;
    } else {
        generated_store_as4_varying_pack_type_127(add_97, vec4(0, 0, 0, 1));
        const vec4 load_126 = generated_load_as4_varying_pack_type_95(add_97);
        fragColor = load_126;
        cf_depth_90 = 0;
    }
    const uint load_127 = cf_depth_90;
    const bool eq_128 = load_127 == 0;
    if (eq_128) { 
        stack_ptr = load_91;
        return;
    }
    //unreachable
 }
void generated_init() { 
    stack_ptr = 0U;
    return;
 }
Array_130 addressable_word_memory_as_4;
void generated_store_as4_varying_u32(uint64_t ptr_28, uint value_29) { 
    const uint64_t div_129 = ptr_28 / 4UL;
    (addressable_word_memory_as_4.arr[int(div_129)]) = value_29;
    return;
 }
uint generated_load_as4_varying_u32(uint64_t ptr_40) { 
    const uint64_t div_131 = ptr_40 / 4UL;
    const uint load_132 = (addressable_word_memory_as_4.arr[int(div_131)]);
    return load_132;
 }
void generated_store_as4_varying_pack_type_127(uint64_t ptr_49, vec4 value_50) { 
    const uint64_t div_133 = ptr_49 / 4UL;
    const float extract_134 = (value_50.x);
    const uint reinterpret_135 = floatBitsToUint(extract_134);
    (addressable_word_memory_as_4.arr[int(div_133)]) = reinterpret_135;
    const uint64_t add_136 = div_133 + 4UL;
    const float extract_137 = (value_50.y);
    const uint reinterpret_138 = floatBitsToUint(extract_137);
    (addressable_word_memory_as_4.arr[int(add_136)]) = reinterpret_138;
    const uint64_t add_139 = add_136 + 4UL;
    const float extract_140 = (value_50.z);
    const uint reinterpret_141 = floatBitsToUint(extract_140);
    (addressable_word_memory_as_4.arr[int(add_139)]) = reinterpret_141;
    const uint64_t add_142 = add_139 + 4UL;
    const float extract_143 = (value_50.w);
    const uint reinterpret_144 = floatBitsToUint(extract_143);
    (addressable_word_memory_as_4.arr[int(add_142)]) = reinterpret_144;
    const uint64_t add_145 = add_142 + 4UL;
    return;
 }
vec4 generated_load_as4_varying_pack_type_95(uint64_t ptr_68) { 
    const uint64_t div_146 = ptr_68 / 4UL;
    const uint load_147 = (addressable_word_memory_as_4.arr[int(div_146)]);
    const float reinterpret_148 = uintBitsToFloat(load_147);
    const uint64_t add_149 = div_146 + 4UL;
    const uint load_150 = (addressable_word_memory_as_4.arr[int(add_149)]);
    const float reinterpret_151 = uintBitsToFloat(load_150);
    const uint64_t add_152 = add_149 + 4UL;
    const uint load_153 = (addressable_word_memory_as_4.arr[int(add_152)]);
    const float reinterpret_154 = uintBitsToFloat(load_153);
    const uint64_t add_155 = add_152 + 4UL;
    const uint load_156 = (addressable_word_memory_as_4.arr[int(add_155)]);
    const float reinterpret_157 = uintBitsToFloat(load_156);
    const uint64_t add_158 = add_155 + 4UL;
    return vec4(reinterpret_148, reinterpret_151, reinterpret_154, reinterpret_157);
 }


