#version 120
/* file generated by shady */
#define ubyte uint
#define uchar uint
#define ulong uint
int mod(int a, int b) {
    int q = a / b;
    int qb = q * b;
    return a - qb;
}

int rshift1(int word) {
    return word / 2;
}

int lshift1(int word) {
    int capped = mod(word, 32768);
    return capped * 2;
}

bool extract_bit(int word, int pos) {
    int shifted = word;
    for (int i = 0; i < pos; i++) {
        shifted = rshift1(shifted);
    }
    return mod(shifted, 2) == 1;
}	

const int bits[16] = int[16](0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000);

int set_bit(int word, int pos, bool value) {
    int result = 0;
    for (int i = 0; i < 16; i++) {
        bool set;
        if (i == pos)
            set = value;
        else
            set = extract_bit(word, i);
        if (set)
            result += bits[i];
    }
    return result;
    //if (value) {
    //    return mod(unset + bits[pos], 65536);
    //}
    //return unset;
}

int and(int a, int b) {
    int shifteda = a;
    int shiftedb = b;
    int result = 0;
    for (int i = 0; i < 16; i++) {
        bool ba = mod(shifteda, 2) == 1;
        bool bb = mod(shiftedb, 2) == 1;
        bool br = ba && bb;
        
        if (br)
            result += bits[i];

        shifteda = rshift1(shifteda);
        shiftedb = rshift1(shiftedb);
    }
    return result;
}

int or(int a, int b) {
    int shifteda = a;
    int shiftedb = b;
    int result = 0;
    for (int i = 0; i < 16; i++) {
        bool ba = mod(shifteda, 2) == 1;
        bool bb = mod(shiftedb, 2) == 1;
        bool br = ba || bb;
        
        if (br)
            result += bits[i];

        shifteda = rshift1(shifteda);
        shiftedb = rshift1(shiftedb);
    }
    return result;
}

int xor(int a, int b) {
    int shifteda = a;
    int shiftedb = b;
    int result = 0;
    for (int i = 0; i < 16; i++) {
        bool ba = mod(shifteda, 2) == 1;
        bool bb = mod(shiftedb, 2) == 1;
        bool br = ba ^^ bb;
        
        if (br)
            result += bits[i];

        shifteda = rshift1(shifteda);
        shiftedb = rshift1(shiftedb);
    }
    return result;
}

int not(int a) {
    int shifteda = a;
    int result = 0;
    for (int i = 0; i < 16; i++) {
        bool ba = mod(shifteda, 2) == 1;
        bool br = !ba;
        
        if (br)
            result += bits[i];

        shifteda = rshift1(shifteda);
    }
    return result;
}

bool and(bool a, bool b) { return a && b; }
bool  or(bool a, bool b) { return a || b; }
bool xor(bool a, bool b) { return a ^^ b; }
bool not(bool a) { return !a; }


/* types: */

struct Array_365 {
    int arr[1024];
};

struct struct_anon /* nominal */ {
    float _0;
    float _1;
    float _2;
    float _3;
    float _4;
    float _5;
    float _6;
    float _7;
    float _8;
    float _9;
    float _10;
    float _11;
    float _12;
    float _13;
    float _14;
    float _15;
};

struct union_mat4 /* nominal */ {
    struct_anon _0;
};

/* declarations: */

Array_365 memory_Private;
int stack_ptr = 0;
attribute vec3 vertexIn;
uniform union_mat4 myMatrix;
attribute vec2 texCoordIn;
varying vec2 texCoord;
void main();
void generated_init();
/* definitions: */

void main() { 
    generated_init();
    int _366 = stack_ptr;
    vec3 _367 = vertexIn;
    float _370 = ((myMatrix._0)._0);
    float _371 = ((myMatrix._0)._1);
    float _372 = ((myMatrix._0)._2);
    float _373 = ((myMatrix._0)._3);
    float _374 = ((myMatrix._0)._4);
    float _375 = ((myMatrix._0)._5);
    float _376 = ((myMatrix._0)._6);
    float _377 = ((myMatrix._0)._7);
    float _378 = ((myMatrix._0)._8);
    float _379 = ((myMatrix._0)._9);
    float _380 = ((myMatrix._0)._10);
    float _381 = ((myMatrix._0)._11);
    float _382 = ((myMatrix._0)._12);
    float _383 = ((myMatrix._0)._13);
    float _384 = ((myMatrix._0)._14);
    float _385 = ((myMatrix._0)._15);
    float _386 = (_367.x);
    float _387 = (_367.y);
    float _388 = (_367.z);
    float _389 = _387 * _374;
    float _390 = (_370 * _386) + _389;
    float _391 = (_378 * _388) + _390;
    float _392 = _391 + _382;
    float _393 = _387 * _375;
    float _394 = (_371 * _386) + _393;
    float _395 = (_379 * _388) + _394;
    float _396 = _395 + _383;
    float _397 = _387 * _376;
    float _398 = (_372 * _386) + _397;
    float _399 = (_380 * _388) + _398;
    float _400 = _399 + _384;
    float _401 = _387 * _377;
    float _402 = (_373 * _386) + _401;
    float _403 = (_381 * _388) + _402;
    float _404 = _403 + _385;
    vec4 modified_407 = vec4(0.00000000f, 0.00000000f, 0.00000000f, 0.00000000f);
    (modified_407.x) = _392;
    vec4 _408 = modified_407;
    vec4 modified_409 = _408;
    (modified_409.y) = _396;
    vec4 _410 = modified_409;
    vec4 modified_411 = _410;
    (modified_411.z) = _400;
    vec4 _412 = modified_411;
    vec4 modified_413 = _412;
    (modified_413.w) = _404;
    vec4 _414 = modified_413;
    gl_Position = _414;
    vec2 _415 = texCoordIn;
    texCoord = _415;
    stack_ptr = _366;
    return;
 }
void generated_init() { 
    stack_ptr = 0;
    return;
 }


